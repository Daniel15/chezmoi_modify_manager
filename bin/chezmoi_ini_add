#!/usr/bin/env zsh

# Script to add a config file for processing with chezmoi_ini_manager.py
# Assumes chezmoi_ini_manager is installed as
# <chezmoi-source-dir>/.utils/chezmoi_modify_manager/bin/chezmoi_ini_manager.py
# If not, adjust path in exec call in create_script()

zmodload zsh/zutil

args=(
    h=help -help=help
    s=smart -smart-readd=smart
)

zparseopts -D -E -F $args
if [[ $? -ne 0 ]]; then
    exit 1
fi

if [[ $help ]]; then
    printf "Usage: $0 [options...] <file in managed directory> ...\n"
    printf "\n"
    printf "Options:\n"
    printf "  -h, --help           show help message and exit\n"
    printf "  -s, --smart-readd    re-add files as managed .src.ini if they are already managed, otherwise add with plain chezmoi\n"
    printf "\n"
    printf "Use this instead of chezmoi add for the ini files in question.\n"
    printf "\n"
    printf "The script can also convert files that are currently managed as\n"
    printf "plain settings files to be managed by chezmoi_ini_manager.\n"
    printf "\n"
    printf "Finally it can update the .src.ini if a settings file is already\n"
    printf "managed by chezmoi_ini_manager.\n"
    exit 0
fi

# Path for hook
HOOK_PATH="$(chezmoi source-path)/.chezmoi_modify_manager.add_hook"

create_script() {
    local script_file=$1
    # We do NOT want to overwrite the script, if it exists the user will likely
    # have added custom flags to chezmoi_ini_manager to ignore/transform (that is the
    # whole point after all).
    if [[ ! -f $script_file ]]; then
        cat > $script_file << 'END'
#!/bin/bash

src_path="{{ .chezmoi.sourceDir }}"
script="{{ .chezmoi.sourceFile }}"

src_file="${script/.tmpl/.src.ini}"
src_file="${src_file/modify_}"

# Add your options to chezmoi_ini_manager.py here
options=(
)

exec "${src_path}/.utils/chezmoi_modify_manager/bin/chezmoi_ini_manager.py" \
    -s "${src_path}/${src_file}" \
    "${options[@]}"
END
        echo "     New script at $script_file"
    fi
}

# Add with script wrapper.
# $1 Path in ~
add_with_script() {
    local dest_file=$1
    chezmoi add "$dest_file"
    local src_path="$(chezmoi source-path $dest_file)"
    local src_dir=${src_path%/*}
    local data_file=${src_path}.src.ini
    local script_file=$src_dir/modify_${src_path##*/}.tmpl
    # If the hook exists, execute it instead of just moving the file
    if [[ -f $HOOK_PATH ]]; then
        echo "     Executing hook script..."
        $HOOK_PATH ini $dest_file $data_file < $src_path > $data_file
        rm $src_path
    else
        echo "     No hook script found, performing direct update."
        mv $src_path $data_file
    fi
    create_script $script_file
}

while [[ $# -gt 0 ]]; do
    dest_file="$1"
    if [[ ! -f $dest_file ]]; then
        echo "Must use existing file! $dest_file not found or not a file"
        exit 1
    fi

    # Check if we are re-adding a file or adding a new file:
    if [[ -f "$(chezmoi source-path $dest_file 2>/dev/null)" ]]; then
        echo "Existing (to chezmoi) file: $dest_file"
        src_path="$(chezmoi source-path $dest_file)"
        # Figure out state of this file. Is it a modify script?
        if [[ $src_path =~ modify_ ]]; then
            echo "  -> Updating existing .src.ini file for $dest_file..."
            data_file="${${src_path/modify_/}%.tmpl}.src.ini"
            if [[ -f $HOOK_PATH ]]; then
                echo "     Executing hook script..."
                $HOOK_PATH ini $dest_file $data_file < $dest_file > $data_file
            else
                echo "     No hook script found, performing direct update."
                cp $dest_file $data_file
            fi
        else
            if [[ ! $smart ]]; then
                echo "  -> Converting existing file $dest_file to managed..."
                # This case is the same as adding a new file.
                add_with_script $dest_file
            else
                echo "  -> Forwarding unmanaged file $dest_file to chezmoi add..."
                chezmoi add $dest_file
            fi
        fi
    else
        echo "New (to chezmoi) file: $dest_file"
        if [[ $smart ]]; then
            echo "  -> In smart mode... Adding as plain chezmoi..."
            chezmoi add $dest_file
        else
            echo "  -> Setting up new modify_ script..."
            add_with_script $dest_file
        fi
    fi

    shift 1
done
